<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Average" xml:space="preserve">
    <value>Average</value>
  </data>
  <data name="coffee" xml:space="preserve">
    <value>Coffee</value>
  </data>
  <data name="Compare" xml:space="preserve">
    <value>Compare</value>
  </data>
  <data name="Crop" xml:space="preserve">
    <value>Crops</value>
  </data>
  <data name="DescriptionLong" xml:space="preserve">
    <value>This agroclimatic map viewer is an interactive tool that allows users, mainly extension agents, technical staff and decision-making entities, to view historical information on agroclimatic indicators (for example, indicators that characterize droughts, excess rainfall, heat waves, cold waves, Moniliasis risk, and risk of thermal and water stress), specific to the department of San Martín (Peru).

The maps obtained through this tool can be used for various purposes, such as:

Know the average spatial patterns of the agroclimatic indicators mentioned above.

To explore how specific phases of the El Niño-Southern Oscillation (ENSO) phenomenon (ie, “El Niño”, “La Niña”) have historically influenced conditions of deficit and excess water in the department of San Martín.

Identify the agricultural regions with the highest risk of being affected by Moniliasis, combined thermal and water stress, and cold waves.

All the agroclimatic indicators have been created for specific periods of the year, in which key phenological stages for fruit crops in the region occur, as follows: February – April (Period of maximum flowering); May – September (Period of growth and development of the fruits); and October - December (Period of maturation of the fruits). For the development of this tool, the PISCO climate database was used, which has daily historical information on precipitation, temperatures (maximum and minimum), and potential evapotranspiration, for the period 1981-2016. Finally, seven El Niño events (1982-1983, 1987, 1991-1992, 1997-1998, 2002, 2009, 2015-2016) and six La Niña events (1985, 1988-1989, 1995, 1998-2000, 2007-2008, 2010-2012), in order to characterize the behavior of the different indicators under these phases of the ENSO phenomenon.</value>
  </data>
  <data name="dry_bean" xml:space="preserve">
    <value>Drybean</value>
  </data>
  <data name="dry_spells" xml:space="preserve">
    <value>Dry Periods</value>
  </data>
  <data name="El_nino" xml:space="preserve">
    <value>El Niño</value>
  </data>
  <data name="Group" xml:space="preserve">
    <value>Agroclimatic indicators</value>
  </data>
  <data name="heat_waves" xml:space="preserve">
    <value>Heatwaves</value>
  </data>
  <data name="heavy_rainfall" xml:space="preserve">
    <value>Wet periods</value>
  </data>
  <data name="Humidity" xml:space="preserve">
    <value>Humidity</value>
  </data>
  <data name="La_nina" xml:space="preserve">
    <value>La Niña</value>
  </data>
  <data name="maize" xml:space="preserve">
    <value>Maize</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Period" xml:space="preserve">
    <value>Period</value>
  </data>
  <data name="Precipitation" xml:space="preserve">
    <value>Precipitation</value>
  </data>
  <data name="soybean" xml:space="preserve">
    <value>Soybean</value>
  </data>
  <data name="spei" xml:space="preserve">
    <value>SPEI</value>
  </data>
  <data name="Temperature" xml:space="preserve">
    <value>Temperature</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Agroclimatic indices viewer</value>
  </data>
  <data name="water_demand" xml:space="preserve">
    <value>Evapotranspiration</value>
  </data>
</root>