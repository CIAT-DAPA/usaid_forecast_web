<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="agronomic_Description" xml:space="preserve">
    <value>This database contains information on the agronomic configuration of the forecasts and historical data offered on the crop platform. You can select whether you want to obtain the data on the cultivars of each crop or, conversely, the soil configuration for each of these.</value>
  </data>
  <data name="agronomic_Title" xml:space="preserve">
    <value>Agronomic data</value>
  </data>
  <data name="climate_forecast_Description" xml:space="preserve">
    <value>This database contains the result on the latest climate prediction made for different geographical areas. The probabilities of precipitation for each climatic season is given by normality, that is, if it is below, within or above the normal range. You can also download the climatic scenarios according to your selection. You can download: the normal precipitation probability values, above and below with more number of decimals for the 6 months forecast or the values ​​of climatic scenarios for precipitation, maximum, minimum temperature and solar radiation. This information can be downloaded for each station used to generate the information of the selected municipality.</value>
  </data>
  <data name="climate_forecast_Title" xml:space="preserve">
    <value>Weather forecast</value>
  </data>
  <data name="climate_historical_Description" xml:space="preserve">
    <value>You can obtain monthly historical data for each weather station that is used to make the weather forecast. Data from variables such as maximum and minimum temperatures, precipitation and solar radiation can be obtained each month for a period of time. You can download the value for solar radiation, maximum temperature and minimum temperature for all months from 1980 to 2014 from the station used to generate the information of the selected municipality.</value>
  </data>
  <data name="climate_historical_Title" xml:space="preserve">
    <value>Historical climate</value>
  </data>
  <data name="climatology_Description" xml:space="preserve">
    <value>In this database you can find filtered data from each weather station on the weather. Data from variables such as maximum and minimum temperatures, precipitation, solar radiation, among others, can be obtained. You can establish a relationship with the data obtained in the geographic data section. You can download the historical monthly average of climatic data (maximum, minimum temperature, precipitation, solar radiation) of the station used to generate the information of the selected municipality.</value>
  </data>
  <data name="climatology_Title" xml:space="preserve">
    <value>Climatology</value>
  </data>
  <data name="Cultivar" xml:space="preserve">
    <value>Cultivars</value>
  </data>
  <data name="geographic_Description" xml:space="preserve">
    <value>This database contains information on the states, municipalities and weather stations that are available for forecasts and historical data offered on the platform. It is necessary to establish the relationship with other databases of this application.</value>
  </data>
  <data name="geographic_Title" xml:space="preserve">
    <value>Geographical data</value>
  </data>
  <data name="Soil" xml:space="preserve">
    <value>Soils</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Databases</value>
  </data>
  <data name="yield_forecast_Description" xml:space="preserve">
    <value>This database has the latest agroclimatic forecast information. This contains the production data organized by weather station, cultivate and soil. The statistics are the result of the crop model, executed under various climatic scenarios. - You can download the predicted values ​​for: yield, accumulated precipitation, maximum accumulated temperature, minimum accumulated temperature, biomass and days to harvest according to the sowing date. For each of these climatic factors, you will obtain the average, maximum, minimum value, standard deviation, and 95% and 5% confidence intervals. These data are presented for all predicted days and for each station used to generate the information of the selected municipality.</value>
  </data>
  <data name="yield_forecast_Title" xml:space="preserve">
    <value>Crops forecast</value>
  </data>
  <data name="yield_historical_Description" xml:space="preserve">
    <value>This database contains the result of the yield data of the different crops in different municipalities of the country.</value>
  </data>
  <data name="yield_historical_Title" xml:space="preserve">
    <value>Histórico de producción</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Weather station</value>
  </data>
  <data name="Probabilities" xml:space="preserve">
    <value>Probabilities</value>
  </data>
  <data name="Scenarios" xml:space="preserve">
    <value>Scenarios</value>
  </data>
  <data name="SearchType" xml:space="preserve">
    <value>Type search</value>
  </data>
  <data name="Years" xml:space="preserve">
    <value>Year</value>
  </data>
</root>